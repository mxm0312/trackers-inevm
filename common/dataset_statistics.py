import cv2
import os
from tqdm import tqdm
import argparse
from datetime import timedelta
import numpy as np

def format_duration(seconds):
    return str(timedelta(seconds=int(seconds)))

def analyze_videos(folder_path, show_per_video=False):
    video_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.mp4', '.avi', '.mov', '.mkv'))]
    total_videos = len(video_files)
    
    if total_videos == 0:
        print("–ù–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.")
        return

    total_frames = 0
    total_duration = 0
    fps_list = []
    resolution_list = []

    if show_per_video:
        print("\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∏–¥–µ–æ:")

    for video_file in tqdm(video_files, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ"):
        video_path = os.path.join(folder_path, video_file)
        cap = cv2.VideoCapture(video_path)

        if not cap.isOpened():
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å: {video_file}")
            continue

        frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        fps = cap.get(cv2.CAP_PROP_FPS)
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        duration = frames / fps if fps > 0 else 0

        total_frames += frames
        total_duration += duration
        fps_list.append(fps)
        resolution_list.append((width, height))

        if show_per_video:
            print(f"- {video_file}: {frames} –∫–∞–¥—Ä–æ–≤, {format_duration(duration)} ({duration:.2f} —Å–µ–∫), {fps:.2f} FPS, {width}x{height}")

        cap.release()

    avg_fps = np.mean(fps_list)
    avg_resolution = np.mean(resolution_list, axis=0)

    print("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É:")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {total_videos}")
    print(f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(total_duration)} ({total_duration:.2f} —Å–µ–∫)")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤: {total_frames}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞ –≤–∏–¥–µ–æ: {total_frames // total_videos}")
    print(f"–°—Ä–µ–¥–Ω–∏–π FPS: {avg_fps:.2f}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {int(avg_resolution[0])}x{int(avg_resolution[1])}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ")
    parser.add_argument("folder", help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –≤–∏–¥–µ–æ")
    parser.add_argument("--details", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∏–¥–µ–æ")
    args = parser.parse_args()

    analyze_videos(args.folder, args.details)
